/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_F46C34B__
#define __PLUGINEDITOR_H_F46C34B__

#include "../JuceLibraryCode/JuceHeader.h"
#include "../JuceLibraryCode/JucePluginCharacteristics.h"
#include "PluginProcessor.h"


//==============================================================================
/**
*/



class StereoDelay2AudioProcessorEditor  : public AudioProcessorEditor,
										  public SliderListener,
										  public ButtonListener,
										  public Timer
{
friend class StereoDelay2AudioProcessor;
public:
    StereoDelay2AudioProcessorEditor (StereoDelay2AudioProcessor* ownerFilter);
    ~StereoDelay2AudioProcessorEditor();

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);
	void resized();
    void sliderValueChanged (Slider* sliderThatWasMoved);
    void buttonClicked (Button* buttonThatWasClicked);
	float calcSliderToTime(float value);
	void timerCallback();

	

	// Binary resources:
    static const char* img1_lacznik_260_21_jpg;
    static const int img1_lacznik_260_21_jpgSize;
    static const char* link_off_60_24_jpg;
    static const int link_off_60_24_jpgSize;
    static const char* link_on_60_24_jpg;
    static const int link_on_60_24_jpgSize;
    static const char* bypass_off_24_23_jpg;
    static const int bypass_off_24_23_jpgSize;
    static const char* baypass_on_24_23_jpg;
    static const int baypass_on_24_23_jpgSize;
    static const char* meter_blue_jpg;
    static const int meter_blue_jpgSize;
    static const char* background_meter_jpg;
    static const int background_meter_jpgSize;

	    Label* titleLabel;
    GroupComponent* leftChannelGroup;
    Slider* ldelaySlider;
    Label* delaytextLabel;
    Label* ldelayLabel;
    Label* mstextLabel;
    Slider* lfeedbackSlider;
    Label* mintextLabel;
    Label* maxtextLabel;
    Label* feedbacktextLabel;
    Slider* lfilterSlider;
    Label* mintextLabel2;
    Label* maxtextLabel2;
    Label* hicuttextLabel;
    Slider* lpanoramaSlider;
    Label* ltextLabel;
    Label* rtextLabel;
    Label* panorametextLabel;
    GroupComponent* rightChannelGroup;
    Slider* rdelaySlider;
    Label* delaytextLabel2;
    Label* rdelayLabel;
    Label* mstextLabel2;
    Slider* rfeedbackSlider;
    Label* mintextLabel3;
    Label* maxtextLabel3;
    Label* feedbacktextLabel2;
    Slider* rfilterSlider;
    Label* mintextLabel4;
    Label* maxtextLabel4;
    Label* hicuttextLabel2;
    Slider* rpanoramaSlider;
    Label* ltextLabel2;
    Label* rtextLabel2;
    Label* panorametextLabel2;
    ImageButton* linkButton;
    GroupComponent* overallGorup;
    Slider* mixSlider;
    Label* drytextLabel;
    Label* maxtextLabel5;
    Label* outputmixtextLabel;
    Slider* outputSlider;
    Label* inftextLabel;
    Label* _6dbtextLabel;
    Label* outputtextLabel;
    Slider* delaystereoSlider;
    Label* monotextLabel;
    Label* stereotextLabel;
    Label* delaymonostereotextLabel;
    Label* fiftytextLabel;
    Label* _0dbtextLabel;
    ImageButton* bypassButton;
    Label* bypassLabel;
	ImageButton* rlevelmeter;
    ImageButton* llevelmeter;
    Image cachedImage_img1_lacznik_260_21_jpg;
	Image cachedImage_background_meter_jpg;

	float l_width_meter;
	float r_width_meter;
	
	float l_width_meter_in;
	float r_width_meter_in;

	float l_width_meter_out;
	float r_width_meter_out;

	float decay_time; //czas w sekudnach do opadniecia wskaznika od 0 dB do -60 dB przy braku sygnalu wejsciowego

	float factor;
	
	StereoDelay2AudioProcessor* getProcessor() const
    {
        return static_cast <StereoDelay2AudioProcessor*> (getAudioProcessor());
    }

};

#endif  // __PLUGINEDITOR_H_F46C34B__
